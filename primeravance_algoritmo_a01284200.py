# -*- coding: utf-8 -*-
"""PrimerAvance_Algoritmo_A01284200.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KqBMT0vdP81gEzV_j_GxFvtkvmvdhXYP
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

"""# Regresión Lineal Simple"""

def predict_y(x_list, m,c):
  y_predictions = []
  for i in x_list:
    y_pred = m * i +c
    y_predictions.append(y_pred)

  return y_predictions

def calculate_dc(y,y_pred, n):
  valores_sum = []
  for i in range(len(y)):
    resta = y[i]-y_pred[i]
    valores_sum.append(resta)
  
  dc = sum(valores_sum)

  dc = ((-2)/n)*dc

  return dc

def calculate_dm(y,y_pred, n,x):
  valores_sum = []
  for i in range(len(y)):
    resta = 0
    resta = y[i]-y_pred[i]
    r = resta*x[i]
    valores_sum.append(r)
  
  dm = sum(valores_sum)

  dm = ((-2)/n)*dm

  return dm

def cost_function(y,m,c,n,x):
  y_pred = predict_y(x,m,c)
  y_list = []
  for i in range(len(y)):
    resta = (y[i]-y_pred[i])**2
    y_list.append(resta)

  sumatoria = sum(y_list)
  mse = (1/n)*sumatoria

  return mse

def regresion_lineal(lista_x,lista_y,l_rate):
  m = 0 
  c = 0
  new_m = 0
  new_c = 0
  cost_values = []
  n= len(X_train)
  for i in range(500):
    m = new_m
    c = new_c
    predicted_yvalues = predict_y(X_train, m,c)
    dc_value = calculate_dc(y_train,predicted_yvalues, n)
    dm_value = calculate_dm(y_train,predicted_yvalues, n,X_train)

    new_m = m-l_rate*dm_value
    new_c = c-l_rate*dc_value

    costo = cost_function(y_train,new_m,new_c,n,X_train)
    cost_values.append(costo)

  return new_m,new_c,cost_values

"""# Entrenar Modelo"""

#df = pd.read_csv('/content/drive/MyDrive/Inteligencia Artificial Avanzada/student_scores.csv')

#df.head(2)

#training_data = df.sample(frac=0.8, random_state=25)
#testing_data = df.drop(training_data.index)

#X_train = training_data['Hours'].to_numpy()
#y_train = training_data['Scores'].to_numpy()

#X_test = testing_data['Hours'].to_numpy()
#y_test = testing_data['Scores'].to_numpy()

X_train = np.array([3.2, 2.7, 1.9, 7.7, 4.8, 3.3, 2.5, 9.2, 2.5, 5.9, 2.7, 1.1, 6.9,
       7.4, 8.5, 5.5, 5.1, 1.5, 7.8, 8.3])

y_train = np.array([27, 25, 24, 85, 54, 42, 21, 88, 30, 62, 30, 17, 76, 69, 75, 60, 47,
       20, 86, 81])

X_test = np.array([3.5, 4.5, 8.9, 6.1, 3.8])

y_test = np.array([30, 41, 95, 67, 35])

m,c,costos = regresion_lineal(X_train,y_train,0.01)

"""#Test"""

y_predicted = predict_y(X_test,m,c)

y_test

y_predicted

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_predicted)
print('r2 score for a model which predicts mean value always is', r2)

from matplotlib import pyplot as plt

plt.plot(costos)

"""# Regresión Lineal Multiple"""

#df = pd.read_csv('/content/drive/MyDrive/Inteligencia Artificial Avanzada/Student_Marks.csv')

#df.head(10)

#training_data = df.sample(frac=0.8, random_state=25)
#testing_data = df.drop(training_data.index)

#X_train = training_data[['number_courses','time_study']].to_numpy()
#y_train = training_data['Marks'].to_numpy()

#X_test = testing_data[['number_courses','time_study']].to_numpy()
#y_test = testing_data['Marks'].to_numpy()

X_train = np.array([[6.   , 2.754],
       [4.   , 1.299],
       [6.   , 6.594],
       [6.   , 2.142],
       [4.   , 6.954],
       [3.   , 6.063],
       [7.   , 7.649],
       [7.   , 6.376],
       [3.   , 1.033],
       [7.   , 0.309],
       [3.   , 4.508],
       [7.   , 0.13 ],
       [8.   , 2.262],
       [3.   , 4.633],
       [4.   , 5.473],
       [8.   , 2.73 ],
       [6.   , 3.561],
       [3.   , 4.869],
       [8.   , 7.468],
       [4.   , 3.797],
       [7.   , 7.957],
       [3.   , 1.407],
       [8.   , 4.378],
       [3.   , 4.274],
       [6.   , 4.13 ],
       [6.   , 6.126],
       [8.   , 7.591],
       [8.   , 5.985],
       [4.   , 3.635],
       [3.   , 0.55 ],
       [7.   , 4.218],
       [3.   , 7.543],
       [3.   , 0.301],
       [8.   , 6.471],
       [5.   , 3.413],
       [8.   , 6.201],
       [8.   , 3.919],
       [3.   , 6.198],
       [6.   , 3.591],
       [3.   , 2.908],
       [8.   , 6.08 ],
       [4.   , 1.395],
       [8.   , 3.977],
       [4.   , 4.733],
       [7.   , 0.508],
       [8.   , 7.641],
       [7.   , 6.049],
       [7.   , 0.423],
       [5.   , 3.197],
       [7.   , 7.451],
       [4.   , 3.736],
       [6.   , 3.211],
       [4.   , 3.133],
       [4.   , 0.771],
       [7.   , 6.533],
       [5.   , 6.379],
       [5.   , 1.557],
       [4.   , 0.14 ],
       [6.   , 7.283],
       [8.   , 3.864],
       [3.   , 4.083],
       [5.   , 2.518],
       [4.   , 7.163],
       [6.   , 7.711],
       [5.   , 3.913],
       [3.   , 0.805],
       [3.   , 0.803],
       [6.   , 0.376],
       [3.   , 7.353],
       [8.   , 0.932],
       [3.   , 6.173],
       [4.   , 2.966],
       [4.   , 5.027],
       [5.   , 5.719],
       [3.   , 1.629],
       [4.   , 4.779],
       [3.   , 5.635],
       [5.   , 1.803],
       [5.   , 2.051],
       [7.   , 4.067]])

y_train = np.array([15.725,  8.837, 39.965, 13.562, 39.952, 29.889, 51.583, 40.024,
        6.053, 12.027, 19.202, 12.591, 17.705, 20.398, 27.569, 19.564,
       19.128, 21.379, 51.343, 16.703, 54.321,  6.623, 26.532, 17.672,
       22.184, 35.939, 53.158, 38.278, 16.517,  6.185, 24.318, 43.978,
        5.609, 42.426, 17.264, 39.957, 24.451, 31.236, 19.771, 11.397,
       38.49 ,  8.92 , 25.133, 22.073, 12.647, 53.359, 36.653, 12.132,
       16.106, 49.544, 16.606, 17.822, 13.811,  7.892, 41.358, 36.746,
       10.429,  7.336, 46.453, 24.172, 17.171, 13.416, 41.444, 50.986,
       19.106,  6.349,  6.217, 10.522, 42.036, 15.038, 30.862, 13.119,
       23.916, 30.548,  7.014, 22.701, 26.882, 11.253, 12.209, 23.149])

X_test = np.array([[4.   , 0.096],
       [6.   , 7.909],
       [8.   , 7.811],
       [4.   , 4.41 ],
       [4.   , 4.26 ],
       [7.   , 4.875],
       [5.   , 0.156],
       [3.   , 1.923],
       [6.   , 7.775],
       [4.   , 1.954],
       [3.   , 2.061],
       [6.   , 6.703],
       [7.   , 2.913],
       [4.   , 2.438],
       [6.   , 3.606],
       [6.   , 3.948],
       [4.   , 7.41 ],
       [8.   , 1.982],
       [7.   , 4.182],
       [3.   , 6.335]])

y_test = np.array([ 7.734, 53.018, 55.299, 20.348, 19.466, 28.043,  9.333,  8.1  ,
       51.142,  9.742,  8.924, 40.602, 18.238, 10.844, 19.59 , 21.4  ,
       44.099, 16.461, 24.394, 32.357])

def predict_y_multiple(x_list, m_list,c):
  y_predictions = []
  for i in range(len(x_list)):

    y_pred = x_list[i]@m_list + c
    y_predictions.append(y_pred)

  return y_predictions

def cost_function_multiple(y,m,c,n,x):
  y_pred = predict_y_multiple(x,m,c)
  y_list = []
  for i in range(len(y)):
    resta = (y[i]-y_pred[i])**2
    y_list.append(resta)

  sumatoria = sum(y_list)
  mse = (1/n)*sumatoria

  return mse

def regresion_lineal_multiple(lista_x,lista_y,l_rate):
  m_list = np.zeros(lista_x.shape[1])
  c = 0
  new_m = np.zeros(lista_x.shape[1])
  new_c = 0
  cost_values = []
  n= len(lista_x)
  for i in range(2500):
    m_list = new_m
    c = new_c
    predicted_yvalues = predict_y_multiple(X_train, m_list,c)
    dc_value = calculate_dc(y_train,predicted_yvalues, n)
    dm_value = calculate_dm(y_train,predicted_yvalues, n,X_train)

    new_m = m_list-l_rate*dm_value

    new_c = c-l_rate*dc_value

    costo = cost_function_multiple(y_train,new_m,new_c,n,X_train)

    cost_values.append(costo)

  return new_m,new_c,cost_values

m,c,cost = regresion_lineal_multiple(X_train,y_train,0.01)

y_predicted = predict_y_multiple(X_test,m,c)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_predicted)
print('r2 score for a model which predicts mean value always is', r2)

from matplotlib import pyplot as plt

plt.plot(cost)

